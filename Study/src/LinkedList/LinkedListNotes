Understanding LinkedList in Java: A Complete Guide
A LinkedList is a data structure where elements (called nodes) are connected via links (or pointers). Each node contains:
1.	Data: The value of the element.
2.	Next Pointer: A reference to the next node in the list.

Types of LinkedLists
1.	Singly LinkedList:
o	Each node points to the next node.
o	The last node points to null.
o	Used for simple, linear traversals.
mathematica
Copy code
Head -> [Data | Next] -> [Data | Next] -> [Data | Null]
2.	Doubly LinkedList:
o	Each node has two pointers: one pointing to the next node and another pointing to the previous node.
o	Useful for bi-directional traversals.
mathematica
Copy code
Null <- [Prev | Data | Next] <-> [Prev | Data | Next] <-> [Prev | Data | Null]
3.	Circular LinkedList:
o	The last node points back to the first node, forming a loop.
o	Can be singly or doubly linked.
mathematica
Copy code
[Data | Next] -> [Data | Next] -> [Data | Next] -> Back to Head

LinkedList in Java
Java provides a built-in LinkedList class in the java.util package, which is a doubly linked list.
Key Characteristics of Java's LinkedList:
1.	Implements List, Deque, and Queue interfaces.
2.	Allows null values.
3.	Can be used as:
o	Stack: LIFO operations.
o	Queue: FIFO operations.
o	Deque: Double-ended queue.

Basic Operations
1. Create a LinkedList
java
Copy code
import java.util.LinkedList;

public class LinkedListExample {
    public static void main(String[] args) {
        // Create a LinkedList of integers
        LinkedList<Integer> list = new LinkedList<>();

        // Add elements to the LinkedList
        list.add(10);
        list.add(20);
        list.add(30);

        System.out.println(list); // Output: [10, 20, 30]
    }
}

2. Adding Elements
java
Copy code
LinkedList<String> list = new LinkedList<>();

// Add at the end
list.add("A");
list.add("B");

// Add at a specific position
list.add(1, "C"); // Insert "C" at index 1

// Add at the beginning
list.addFirst("Start");

// Add at the end
list.addLast("End");

System.out.println(list); // Output: [Start, A, C, B, End]

3. Accessing Elements
java
Copy code
System.out.println(list.get(2));  // Get element at index 2 -> Output: C
System.out.println(list.getFirst()); // First element -> Output: Start
System.out.println(list.getLast());  // Last element -> Output: End

4. Removing Elements
java
Copy code
list.remove(2);       // Remove element at index 2
list.remove("C");     // Remove specific element
list.removeFirst();   // Remove first element
list.removeLast();    // Remove last element

System.out.println(list); // Output: [A, B]

5. Iterating Over Elements
java
Copy code
// Using a for loop
for (int i = 0; i < list.size(); i++) {
    System.out.println(list.get(i));
}

// Using an enhanced for loop
for (String s : list) {
    System.out.println(s);
}

// Using an iterator
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}

6. Other Useful Methods
Method	Description
list.size()	Returns the number of elements in the list.
list.contains("A")	Checks if the list contains a specific element.
list.clear()	Removes all elements from the list.
list.isEmpty()	Checks if the list is empty.
list.indexOf("A")	Returns the index of the first occurrence.
list.lastIndexOf("A")	        Returns the index of the last occurrence.

Advantages of LinkedList
1.	Dynamic Size:
o	Unlike arrays, LinkedLists can grow and shrink dynamically.
2.	Efficient Insertions/Deletions:
o	Adding or removing elements from the head, tail, or middle is efficient (O(1) for head/tail).
3.	No Contiguous Memory:
o	Does not require continuous memory allocation like arrays.

Disadvantages of LinkedList
1.	Slower Access:
o	Accessing an element by index takes O(n) (requires traversal).
2.	Higher Memory Usage:
o	Each node stores additional pointers, increasing memory overhead.
3.	Less Cache-Friendly:
o	Nodes are scattered in memory, making it less CPU cache-efficient than arrays.

FAANG Interview Topics on LinkedList
FAANG interviews often focus on implementing and manipulating LinkedLists, especially without relying on Java’s built-in class. Here’s a breakdown of common questions:

1. Reverse a LinkedList
Problem: Reverse a singly linked list.
Code:
java
Copy code
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class ReverseLinkedList {
    public static Node reverse(Node head) {
        Node prev = null;
        Node current = head;
        Node next;

        while (current != null) {
            next = current.next; // Save the next node
            current.next = prev; // Reverse the link
            prev = current;      // Move prev forward
            current = next;      // Move current forward
        }
        return prev; // New head of the reversed list
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);

        Node reversed = reverse(head);
        while (reversed != null) {
            System.out.print(reversed.data + " ");
            reversed = reversed.next;
        }
        // Output: 3 2 1
    }
}

2. Detect a Cycle in a LinkedList
Problem: Detect if a linked list has a cycle (loop).
Approach:
•	Use the Floyd’s Cycle Detection Algorithm (two pointers: slow and fast).
Code:
java
Copy code
public class DetectCycle {
    public static boolean hasCycle(Node head) {
        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;         // Move slow by 1 step
            fast = fast.next.next;    // Move fast by 2 steps
            if (slow == fast) return true; // Cycle detected
        }
        return false; // No cycle
    }
}

3. Merge Two Sorted LinkedLists
Problem: Merge two sorted linked lists into one sorted list.
Code:
java
Copy code
public class MergeSortedLists {
    public static Node merge(Node l1, Node l2) {
        Node dummy = new Node(0);
        Node current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.data < l2.data) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        if (l1 != null) current.next = l1;
        if (l2 != null) current.next = l2;

        return dummy.next;
    }
}

FAANG Tips for LinkedList
1.	Understand Memory and Pointers:
o	Be comfortable with pointers (next and prev) for traversal and manipulation.
2.	Master Common Patterns:
o	Reverse a list, detect a cycle, merge lists, and find the middle node.
3.	Time Complexity:
o	Traversal: O(n)
o	Insertion/Deletion: O(1) for head/tail.
4.	Practice Implementations:
o	Don’t rely only on Java’s built-in LinkedList. Be ready to implement custom LinkedLists from scratch.
5.	Edge Cases:
o	Empty lists, single-node lists, and circular lists.

By mastering these LinkedList concepts and practicing coding problems, you’ll be well-prepared for FAANG interviews! Let me know if you need more examples or detailed explanations.

