BFS and DFS in Depth: Beginner-Friendly and FAANG-Focused
Letâ€™s dive into Breadth-First Search (BFS) and Depth-First Search (DFS), breaking them down in detail, with practical examples in Java, key concepts, and common FAANG-style interview problems.

1. What are BFS and DFS?
Both BFS and DFS are graph and tree traversal algorithms used to explore nodes (or vertices) in a systematic way.
â€¢	Breadth-First Search (BFS):
o	Explores nodes level by level (like ripples spreading in water).
o	Uses a queue (FIFO) to track nodes.
o	Ideal for finding the shortest path in unweighted graphs.
â€¢	Depth-First Search (DFS):
o	Explores as far as possible along a branch, then backtracks.
o	Uses a stack (LIFO) or recursion (implicitly uses the call stack).
o	Ideal for solving connected components, cycles, and path existence problems.

2. Graph Representation
To use BFS or DFS, we first need to represent the graph. Common methods include:
1.	Adjacency Matrix:
o	A 2D array where matrix[i][j] = 1 means there is an edge between i and j.
2.	Adjacency List:
o	A list where each node has a list of its neighbors. This is more memory-efficient.
Example: Graph Representation (Adjacency List)
Graph:
CopyEdit
0 â†’ 1 â†’ 2
â†“       â†˜
3         4
Representation:
java
CopyEdit
import java.util.*;

public class Graph {
    private Map<Integer, List<Integer>> adjacencyList;

    public Graph() {
        adjacencyList = new HashMap<>();
    }

    public void addEdge(int source, int destination) {
        adjacencyList.putIfAbsent(source, new ArrayList<>());
        adjacencyList.get(source).add(destination);
    }

    public List<Integer> getNeighbors(int node) {
        return adjacencyList.getOrDefault(node, new ArrayList<>());
    }

    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addEdge(0, 1);
        graph.addEdge(0, 3);
        graph.addEdge(1, 2);
        graph.addEdge(2, 4);

        System.out.println(graph.adjacencyList);
        // Output: {0=[1, 3], 1=[2], 2=[4]}
    }
}

3. Breadth-First Search (BFS)
Key Idea:
â€¢	Visit all nodes at the current "level" before moving to the next level.
â€¢	Use a queue to keep track of nodes to visit.

BFS Implementation
Example: BFS Traversal
java
CopyEdit
import java.util.*;

public class BFSExample {
    public static void bfsTraversal(Graph graph, int startNode) {
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();

        queue.add(startNode);
        visited.add(startNode);

        while (!queue.isEmpty()) {
            int currentNode = queue.poll();
            System.out.print(currentNode + " "); // Process the current node

            // Visit neighbors
            for (int neighbor : graph.getNeighbors(currentNode)) {
                if (!visited.contains(neighbor)) {
                    queue.add(neighbor);
                    visited.add(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addEdge(0, 1);
        graph.addEdge(0, 3);
        graph.addEdge(1, 2);
        graph.addEdge(2, 4);

        bfsTraversal(graph, 0); // Output: 0 1 3 2 4
    }
}

BFS Applications
1.	Shortest Path in an Unweighted Graph:
o	Find the shortest distance from a source node to all other nodes.
Example: Shortest Path in an Unweighted Graph
java
CopyEdit
public static int bfsShortestPath(Graph graph, int startNode, int targetNode) {
    Queue<Integer> queue = new LinkedList<>();
    Set<Integer> visited = new HashSet<>();
    Map<Integer, Integer> distance = new HashMap<>();

    queue.add(startNode);
    visited.add(startNode);
    distance.put(startNode, 0);

    while (!queue.isEmpty()) {
        int currentNode = queue.poll();

        for (int neighbor : graph.getNeighbors(currentNode)) {
            if (!visited.contains(neighbor)) {
                queue.add(neighbor);
                visited.add(neighbor);
                distance.put(neighbor, distance.get(currentNode) + 1);

                if (neighbor == targetNode) {
                    return distance.get(neighbor); // Return shortest distance
                }
            }
        }
    }

    return -1; // Target not reachable
}

4. Depth-First Search (DFS)
Key Idea:
â€¢	Explore as far as possible along each branch before backtracking.
â€¢	Use a stack or recursion for implementation.

DFS Implementation
Example: DFS Traversal (Recursive)
java
CopyEdit
public class DFSExample {
    public static void dfsTraversal(Graph graph, int currentNode, Set<Integer> visited) {
        visited.add(currentNode);
        System.out.print(currentNode + " "); // Process the current node

        // Visit neighbors
        for (int neighbor : graph.getNeighbors(currentNode)) {
            if (!visited.contains(neighbor)) {
                dfsTraversal(graph, neighbor, visited);
            }
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addEdge(0, 1);
        graph.addEdge(0, 3);
        graph.addEdge(1, 2);
        graph.addEdge(2, 4);

        Set<Integer> visited = new HashSet<>();
        dfsTraversal(graph, 0, visited); // Output: 0 1 2 4 3
    }
}

DFS Applications
1.	Detect Cycles in a Graph:
o	Use a modified DFS to detect back edges.
Example: Detect Cycle in Directed Graph
java
CopyEdit
public static boolean hasCycle(Graph graph, int currentNode, Set<Integer> visited, Set<Integer> recursionStack) {
    visited.add(currentNode);
    recursionStack.add(currentNode);

    for (int neighbor : graph.getNeighbors(currentNode)) {
        if (!visited.contains(neighbor) && hasCycle(graph, neighbor, visited, recursionStack)) {
            return true;
        } else if (recursionStack.contains(neighbor)) {
            return true;
        }
    }

    recursionStack.remove(currentNode);
    return false;
}

public static boolean isCyclic(Graph graph, int numNodes) {
    Set<Integer> visited = new HashSet<>();
    Set<Integer> recursionStack = new HashSet<>();

    for (int i = 0; i < numNodes; i++) {
        if (!visited.contains(i) && hasCycle(graph, i, visited, recursionStack)) {
            return true;
        }
    }

    return false;
}

Comparison of BFS and DFS
Aspect	BFS	DFS
Data Structure	Queue (FIFO)	Stack (LIFO) or Recursion
Traversal Order	Level-by-level	As deep as possible, then backtrack
Shortest Path	Yes (in unweighted graphs)	No
Space Complexity	O(V+E)O(V + E)O(V+E)	O(V+E)O(V + E)O(V+E), but recursion may use more
Cycle Detection	Not inherently suitable	Well-suited

5. FAANG-Style Problems
Problem 1: Number of Islands (BFS or DFS)
Problem: Count the number of connected groups of 1s in a grid (land) where 0 represents water.
BFS Solution:
java
CopyEdit
public static int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0) return 0;

    int rows = grid.length, cols = grid[0].length, islands = 0;
    int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (grid[i][j] == '1') {
                islands++;
                Queue<int[]> queue = new LinkedList<>();
                queue.add(new int[]{i, j});
                grid[i][j] = '0'; // Mark as visited

                while (!queue.isEmpty()) {
                    int[] cell = queue.poll();
                    for (int[] dir : directions) {
                        int x = cell[0] + dir[0];
                        int y = cell[1] + dir[1];

                        if (x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] == '1') {
                            queue.add(new int[]{x, y});
                            grid[x][y] = '0'; // Mark as visited
                        }
                    }
                }
            }
        }
    }

    return islands;
}

Problem 2: Word Ladder (BFS)
Problem: Transform a word into another word by changing one letter at a time. Each transformation must be a valid word in the dictionary.
BFS Solution:
java
CopyEdit
import java.util.*;

public static int wordLadder(String beginWord, String endWord, List<String> wordList) {
    Set<String> wordSet = new HashSet<>(wordList);
    if (!wordSet.contains(endWord)) return 0;

    Queue<String> queue = new LinkedList<>();
    queue.add(beginWord);
    int steps = 1;

    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            String word = queue.poll();

            for (int j = 0; j < word.length(); j++) {
                char[] chars = word.toCharArray();
                for (char c = 'a'; c <= 'z'; c++) {
                    chars[j] = c;
                    String newWord = new String(chars);

                    if (newWord.equals(endWord)) return steps + 1;
                    if (wordSet.contains(newWord)) {
                        queue.add(newWord);
                        wordSet.remove(newWord);
                    }
                }
            }
        }
        steps++;
    }

    return 0;
}

Suggested Problems
1.	LeetCode1:
o	Number of Islands
o	Word Ladder
o	Shortest Path in Binary Matrix
Would you like a deeper dive into BFS/DFS concepts or problems? ðŸ˜Š

