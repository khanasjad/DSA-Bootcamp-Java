Heaps and Priority Queues in Depth: Beginner-Friendly and FAANG-Focused
Heaps and Priority Queues are important data structures commonly used in FAANG interviews. They are widely applied in solving problems like finding the smallest/largest elements, scheduling tasks, or implementing algorithms like Dijkstra's.
Let‚Äôs dive into heaps and priority queues, breaking down the concepts, their operations, and FAANG-style problems with examples in Java.

1. What is a Heap?
A heap is a specialized binary tree-based data structure that satisfies the heap property:
‚Ä¢	Min-Heap: The value of a parent node is smaller than or equal to its children.
‚Ä¢	Max-Heap: The value of a parent node is greater than or equal to its children.

Heap Properties
1.	Shape Property: A heap is a complete binary tree, meaning all levels are completely filled except possibly the last, which is filled from left to right.
2.	Heap Property: For a Min-Heap, every parent node is smaller than or equal to its children. For a Max-Heap, the parent node is greater than or equal to its children.

Heap Representation
A heap can be represented using an array:
1.	The root is at index 0.
2.	For a node at index i:
o	Left child: 2 * i + 1
o	Right child: 2 * i + 2
o	Parent: (i - 1) / 2

Example: Min-Heap
Heap:
markdown
CopyEdit
        1
      /   \
     3     6
    / \   / \
   5   9 8  10
Array Representation: [1, 3, 6, 5, 9, 8, 10]

2. Priority Queues
A priority queue is an abstract data type where elements are dequeued based on their priority. It is typically implemented using a heap.
‚Ä¢	Min Priority Queue: Elements with the smallest priority are dequeued first (Min-Heap).
‚Ä¢	Max Priority Queue: Elements with the largest priority are dequeued first (Max-Heap).

Java Priority Queue
Java provides the PriorityQueue class for implementing heaps and priority queues.
Example:
java
CopyEdit
import java.util.PriorityQueue;

public class PriorityQueueExample {
    public static void main(String[] args) {
        // Min-Heap
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        minHeap.add(10);
        minHeap.add(5);
        minHeap.add(15);
        minHeap.add(1);

        while (!minHeap.isEmpty()) {
            System.out.println(minHeap.poll()); // Output: 1, 5, 10, 15
        }

        // Max-Heap
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        maxHeap.add(10);
        maxHeap.add(5);
        maxHeap.add(15);
        maxHeap.add(1);

        while (!maxHeap.isEmpty()) {
            System.out.println(maxHeap.poll()); // Output: 15, 10, 5, 1
        }
    }
}

3. Common Heap Operations
Operation	Description	Time Complexity
Insert	Add an element to the heap and heapify	O(log‚Å°n)O(\log n)O(logn)
Delete Min/Max	Remove the smallest/largest element	O(log‚Å°n)O(\log n)O(logn)
Peek	Get the smallest/largest element without removing it	O(1)O(1)O(1)
Build a Heap	Convert an array into a heap	O(n)O(n)O(n)

4. FAANG-Style Problems
Problem 1: Find K Smallest/Largest Elements
Problem: Given an array, find the k smallest or k largest elements.

Approach (K Smallest Elements):
1.	Use a Max-Heap of size k.
2.	Iterate through the array:
o	Add elements to the heap.
o	If the heap size exceeds k, remove the maximum element.
3.	The heap contains the k smallest elements.

Code:
java
CopyEdit
import java.util.PriorityQueue;

public class KSmallestElements {
    public static int[] findKSmallest(int[] nums, int k) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);

        for (int num : nums) {
            maxHeap.add(num);
            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = maxHeap.poll();
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {7, 10, 4, 3, 20, 15};
        int k = 3;

        int[] result = findKSmallest(nums, k);
        for (int num : result) {
            System.out.print(num + " "); // Output: 4, 3, 7
        }
    }
}

Problem 2: Kth Largest Element in an Array
Problem: Find the kkk-th largest element in an unsorted array.

Approach:
1.	Use a Min-Heap of size k.
2.	Add elements to the heap. If the size exceeds k, remove the smallest element.
3.	The root of the heap is the kkk-th largest element.

Code:
java
CopyEdit
import java.util.PriorityQueue;

public class KthLargestElement {
    public static int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        for (int num : nums) {
            minHeap.add(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        return minHeap.peek();
    }

    public static void main(String[] args) {
        int[] nums = {3, 2, 1, 5, 6, 4};
        int k = 2;

        System.out.println(findKthLargest(nums, k)); // Output: 5
    }
}

Problem 3: Merge K Sorted Lists
Problem: Merge kkk sorted linked lists into one sorted linked list.

Approach:
1.	Use a Min-Heap to store the smallest elements from each list.
2.	Extract the smallest element from the heap and add the next element from the same list to the heap.
3.	Repeat until all lists are merged.

Code:
java
CopyEdit
import java.util.PriorityQueue;

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class MergeKSortedLists {
    public static ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);

        for (ListNode list : lists) {
            if (list != null) {
                minHeap.add(list);
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (!minHeap.isEmpty()) {
            ListNode smallest = minHeap.poll();
            current.next = smallest;
            current = current.next;

            if (smallest.next != null) {
                minHeap.add(smallest.next);
            }
        }

        return dummy.next;
    }

    public static void main(String[] args) {
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(5);

        ListNode l2 = new ListNode(1);
        l2.next = new ListNode(3);
        l2.next.next = new ListNode(4);

        ListNode l3 = new ListNode(2);
        l3.next = new ListNode(6);

        ListNode[] lists = {l1, l2, l3};
        ListNode result = mergeKLists(lists);

        while (result != null) {
            System.out.print(result.val + " "); // Output: 1, 1, 2, 3, 4, 4, 5, 6
            result = result.next;
        }
    }
}

Problem 4: Top K Frequent Elements
Problem: Given an array of integers, return the kkk most frequent elements.

Approach:
1.	Use a hash map to count frequencies.
2.	Use a Min-Heap to store elements by frequency.
3.	Keep the heap size at kkk.

Code:
java
CopyEdit
import java.util.*;

public class TopKFrequentElements {
    public static List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> frequencyMap.get(a) - frequencyMap.get(b));

        for (int num : frequencyMap.keySet()) {
            minHeap.add(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }

        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll());
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 1, 1, 2, 2, 3};
        int k = 2;

        System.out.println(topKFrequent(nums, k)); // Output: [1, 2]
    }
}

5. Summary of Concepts
Operation	Heap Type	Example
Find Kth Largest Element	Min-Heap	[3, 2, 1, 5, 6, 4], K=2 ‚Üí 5
Merge K Sorted Lists	Min-Heap	Merge sorted linked lists into one
Top K Frequent Elements	Min-Heap	Find the most frequent K elements in an array
Sort Elements	PriorityQueue	Use a heap to sort elements

Suggested Practice Problems
1.	LeetCode:
o	Kth Largest Element in an Array
o	Merge K Sorted Lists
o	Top K Frequent Elements
o	Find Median from Data Stream
Would you like to dive deeper into a specific heap problem or concept? üòä

